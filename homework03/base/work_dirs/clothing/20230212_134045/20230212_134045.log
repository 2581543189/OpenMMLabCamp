2023/02/12 13:40:45 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.1, V11.1.105
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.8.2+cu111
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.9.2+cu111
    OpenCV: 4.5.3
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/12 13:40:46 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=59,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=59,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'StanfordBackgroundDataset'
data_root = '/openbayes/home/clothing-co-parsing'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/openbayes/home/clothing-co-parsing',
        data_prefix=dict(
            img_path='photos', seg_map_path='annotations/pixel-level'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/openbayes/home/clothing-co-parsing',
        data_prefix=dict(
            img_path='photos', seg_map_path='annotations/pixel-level'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/openbayes/home/clothing-co-parsing',
        data_prefix=dict(
            img_path='photos', seg_map_path='annotations/pixel-level'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '/openbayes/home/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=5000, val_interval=5000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=500, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=5000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/clothing'
randomness = dict(seed=0)

2023/02/12 13:40:46 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:46 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:46 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/12 13:40:49 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/12 13:40:54 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:54 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:54 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:55 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:56 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 13:40:56 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/02/12 13:40:56 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/02/12 13:40:56 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([59, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([59]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([59, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([59]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/12 13:40:56 - mmengine - INFO - Load checkpoint from /openbayes/home/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/02/12 13:40:56 - mmengine - INFO - Checkpoints will be saved to /output/work_dirs/clothing.
2023/02/12 13:41:17 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:42:26 - mmengine - INFO - Iter(train) [ 500/5000]  lr: 9.8888e-03  eta: 0:13:28  time: 0.1731  data_time: 0.0048  memory: 11478  loss: 0.8802  decode.loss_ce: 0.5912  decode.acc_seg: 81.7726  aux.loss_ce: 0.2890  aux.acc_seg: 80.6313
2023/02/12 13:43:52 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:43:52 - mmengine - INFO - Iter(train) [1000/5000]  lr: 9.7772e-03  eta: 0:11:46  time: 0.1736  data_time: 0.0048  memory: 3774  loss: 0.7067  decode.loss_ce: 0.4724  decode.acc_seg: 84.0753  aux.loss_ce: 0.2343  aux.acc_seg: 82.4921
2023/02/12 13:45:19 - mmengine - INFO - Iter(train) [1500/5000]  lr: 9.6655e-03  eta: 0:10:14  time: 0.1736  data_time: 0.0047  memory: 3774  loss: 0.6577  decode.loss_ce: 0.4447  decode.acc_seg: 84.9780  aux.loss_ce: 0.2130  aux.acc_seg: 83.2248
2023/02/12 13:46:46 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:46:46 - mmengine - INFO - Iter(train) [2000/5000]  lr: 9.5536e-03  eta: 0:08:45  time: 0.1739  data_time: 0.0047  memory: 3774  loss: 0.6419  decode.loss_ce: 0.4297  decode.acc_seg: 88.3507  aux.loss_ce: 0.2122  aux.acc_seg: 84.0330
2023/02/12 13:48:13 - mmengine - INFO - Iter(train) [2500/5000]  lr: 9.4416e-03  eta: 0:07:17  time: 0.1741  data_time: 0.0047  memory: 3774  loss: 0.6382  decode.loss_ce: 0.4305  decode.acc_seg: 81.0660  aux.loss_ce: 0.2077  aux.acc_seg: 79.2470
2023/02/12 13:49:40 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:49:40 - mmengine - INFO - Iter(train) [3000/5000]  lr: 9.3294e-03  eta: 0:05:49  time: 0.1740  data_time: 0.0047  memory: 3774  loss: 0.4773  decode.loss_ce: 0.3077  decode.acc_seg: 87.5615  aux.loss_ce: 0.1696  aux.acc_seg: 85.8202
2023/02/12 13:51:07 - mmengine - INFO - Iter(train) [3500/5000]  lr: 9.2171e-03  eta: 0:04:21  time: 0.1740  data_time: 0.0048  memory: 3774  loss: 0.5224  decode.loss_ce: 0.3336  decode.acc_seg: 87.6898  aux.loss_ce: 0.1888  aux.acc_seg: 86.2043
2023/02/12 13:52:34 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:52:34 - mmengine - INFO - Iter(train) [4000/5000]  lr: 9.1046e-03  eta: 0:02:54  time: 0.1738  data_time: 0.0047  memory: 3774  loss: 0.4575  decode.loss_ce: 0.2834  decode.acc_seg: 90.4743  aux.loss_ce: 0.1741  aux.acc_seg: 85.6566
2023/02/12 13:54:01 - mmengine - INFO - Iter(train) [4500/5000]  lr: 8.9919e-03  eta: 0:01:27  time: 0.1741  data_time: 0.0048  memory: 3774  loss: 0.4118  decode.loss_ce: 0.2512  decode.acc_seg: 89.3177  aux.loss_ce: 0.1607  aux.acc_seg: 85.6664
2023/02/12 13:55:28 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230212_134045
2023/02/12 13:55:28 - mmengine - INFO - Iter(train) [5000/5000]  lr: 8.8791e-03  eta: 0:00:00  time: 0.1743  data_time: 0.0047  memory: 3774  loss: 0.3739  decode.loss_ce: 0.2297  decode.acc_seg: 89.0401  aux.loss_ce: 0.1443  aux.acc_seg: 87.7816
2023/02/12 13:55:28 - mmengine - INFO - Saving checkpoint at 5000 iterations
2023/02/12 13:55:36 - mmengine - INFO - per class results:
2023/02/12 13:55:36 - mmengine - INFO - 
+--------------------+-------+-------+
|       Class        |  IoU  |  Acc  |
+--------------------+-------+-------+
|     背景(null)     | 96.45 | 98.72 |
| 配件(accessories)  |  1.6  |  2.33 |
|      包(bag)       |  39.1 | 69.07 |
|     腰带(belt)     | 18.33 | 24.32 |
|  运动上衣(blazer)  | 11.78 |  22.3 |
|   女衬衫(blouse)   | 18.23 |  33.2 |
|  紧身衣(bodysuit)  |  0.0  |  0.0  |
|   长筒靴(boots)    |  0.0  |  0.0  |
|     胸罩(bra)      |  0.0  |  0.0  |
|   手镯(bracelet)   |  0.0  |  0.0  |
|     斗篷(cape)     |  2.03 |  2.2  |
| 开襟毛衣(cardigan) |  0.0  |  0.0  |
|    木屐(clogs)     |  nan  |  nan  |
|     外套(coat)     |  24.4 | 30.33 |
|   晚礼服(dress)    |  46.5 | 69.46 |
|   耳环(earrings)   |  nan  |  nan  |
|   平底鞋(flats)    |  0.0  |  0.0  |
|   眼镜(glasses)    |  0.0  |  0.0  |
|    手套(gloves)    |  0.0  |  0.0  |
|     头发(hair)     | 55.69 | 80.92 |
|     帽子(hat)      | 32.96 | 40.47 |
|   高跟鞋(heels)    |  0.0  |  0.0  |
|    帽衫(hoodie)    |  0.0  |  0.0  |
|   内衣(intimate)   |  nan  |  nan  |
|    夹克(jacket)    |  7.3  | 26.62 |
|   牛仔裤(jeans)    | 37.49 | 45.22 |
|  无袖套衫(jumper)  |  0.0  |  0.0  |
|  打底裤(leggings)  |  4.29 |  5.06 |
| 平底便鞋(loafers)  |  0.0  |  0.0  |
|   项链(necklace)   |  0.0  |  0.0  |
|   内裤(panties)    |  nan  |  nan  |
|    裤子(pants)     | 46.26 | 63.46 |
|   帆布鞋(pumps)    |  0.0  |  0.0  |
|   小提包(purse)    |  5.27 |  5.78 |
|     戒指(ring)     |  0.0  |  0.0  |
|   连衣裤(romper)   |  9.57 | 20.44 |
|   凉鞋(sandals)    |  0.0  |  0.0  |
|    围巾(scarf)     | 16.75 | 31.48 |
|    衬衫(shirt)     | 19.68 | 30.23 |
|    鞋子(shoes)     | 45.42 | 69.22 |
|    短裤(shorts)    | 40.93 | 69.61 |
|     皮肤(skin)     | 64.18 | 79.99 |
|    裙子(skirt)     | 25.17 | 33.42 |
|  运动鞋(sneakers)  |  0.0  |  0.0  |
|    袜子(socks)     |  0.0  |  0.0  |
| 长筒袜(stockings)  | 39.31 | 80.37 |
|     西装(suit)     | 30.62 | 43.43 |
| 太阳镜(sunglasses) | 33.22 | 42.26 |
|   毛衣(sweater)    | 28.61 |  42.9 |
| 运动衫(sweatshirt) |  0.0  |  0.0  |
|  游泳衣(swimwear)  |  nan  |  nan  |
|    T恤(t-shirt)    |  28.6 | 43.47 |
|     领带(tie)      |  0.0  |  0.0  |
|   紧身衣(tights)   |  nan  |  nan  |
|     上衣(top)      |  0.46 |  1.62 |
|     背心(vest)     | 18.46 | 25.29 |
|    钱包(wallet)    |  0.0  |  0.0  |
|    手表(watch)     |  0.0  |  0.0  |
|   坡跟鞋(wedges)   |  0.0  |  0.0  |
+--------------------+-------+-------+
2023/02/12 13:55:36 - mmengine - INFO - Iter(val) [201/201]  aAcc: 87.5100  mIoU: 16.0100  mAcc: 23.2700
