{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.2+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2+cu111\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/input0/train.json',\n        img_prefix='/input0/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/input0/val.json',\n        img_prefix='/input0/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/input0/val.json',\n        img_prefix='/input0/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=8)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_2x_balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1787074548, "exp_name": "mask_rcnn_r50_fpn_2x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "bbox_mAP": 0.0505, "bbox_mAP_50": 0.0923, "bbox_mAP_75": 0.0528, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0338, "bbox_mAP_l": 0.0654, "bbox_mAP_copypaste": "0.0505 0.0923 0.0528 0.0000 0.0338 0.0654", "segm_mAP": 0.0664, "segm_mAP_50": 0.0908, "segm_mAP_75": 0.0796, "segm_mAP_s": 0.0048, "segm_mAP_m": 0.0322, "segm_mAP_l": 0.1114, "segm_mAP_copypaste": "0.0664 0.0908 0.0796 0.0048 0.0322 0.1114"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "bbox_mAP": 0.3057, "bbox_mAP_50": 0.4416, "bbox_mAP_75": 0.3777, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1469, "bbox_mAP_l": 0.3789, "bbox_mAP_copypaste": "0.3057 0.4416 0.3777 0.0000 0.1469 0.3789", "segm_mAP": 0.3894, "segm_mAP_50": 0.4428, "segm_mAP_75": 0.4381, "segm_mAP_s": 0.0035, "segm_mAP_m": 0.1438, "segm_mAP_l": 0.5235, "segm_mAP_copypaste": "0.3894 0.4428 0.4381 0.0035 0.1438 0.5235"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5389, "bbox_mAP_50": 0.7509, "bbox_mAP_75": 0.689, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4474, "bbox_mAP_l": 0.6106, "bbox_mAP_copypaste": "0.5389 0.7509 0.6890 0.0000 0.4474 0.6106", "segm_mAP": 0.6493, "segm_mAP_50": 0.7452, "segm_mAP_75": 0.7398, "segm_mAP_s": 0.0026, "segm_mAP_m": 0.4632, "segm_mAP_l": 0.7339, "segm_mAP_copypaste": "0.6493 0.7452 0.7398 0.0026 0.4632 0.7339"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5858, "bbox_mAP_50": 0.799, "bbox_mAP_75": 0.7813, "bbox_mAP_s": 0.0081, "bbox_mAP_m": 0.5451, "bbox_mAP_l": 0.6339, "bbox_mAP_copypaste": "0.5858 0.7990 0.7813 0.0081 0.5451 0.6339", "segm_mAP": 0.7064, "segm_mAP_50": 0.7941, "segm_mAP_75": 0.7898, "segm_mAP_s": 0.0136, "segm_mAP_m": 0.5817, "segm_mAP_l": 0.7766, "segm_mAP_copypaste": "0.7064 0.7941 0.7898 0.0136 0.5817 0.7766"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6053, "bbox_mAP_50": 0.8078, "bbox_mAP_75": 0.7834, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.5679, "bbox_mAP_l": 0.6472, "bbox_mAP_copypaste": "0.6053 0.8078 0.7834 0.0140 0.5679 0.6472", "segm_mAP": 0.7173, "segm_mAP_50": 0.8001, "segm_mAP_75": 0.7958, "segm_mAP_s": 0.0115, "segm_mAP_m": 0.5913, "segm_mAP_l": 0.7877, "segm_mAP_copypaste": "0.7173 0.8001 0.7958 0.0115 0.5913 0.7877"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6174, "bbox_mAP_50": 0.8131, "bbox_mAP_75": 0.786, "bbox_mAP_s": 0.0088, "bbox_mAP_m": 0.5613, "bbox_mAP_l": 0.6637, "bbox_mAP_copypaste": "0.6174 0.8131 0.7860 0.0088 0.5613 0.6637", "segm_mAP": 0.7106, "segm_mAP_50": 0.8037, "segm_mAP_75": 0.7901, "segm_mAP_s": 0.0057, "segm_mAP_m": 0.5732, "segm_mAP_l": 0.7877, "segm_mAP_copypaste": "0.7106 0.8037 0.7901 0.0057 0.5732 0.7877"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6492, "bbox_mAP_50": 0.8203, "bbox_mAP_75": 0.8002, "bbox_mAP_s": 0.0168, "bbox_mAP_m": 0.5718, "bbox_mAP_l": 0.7062, "bbox_mAP_copypaste": "0.6492 0.8203 0.8002 0.0168 0.5718 0.7062", "segm_mAP": 0.7271, "segm_mAP_50": 0.8191, "segm_mAP_75": 0.8164, "segm_mAP_s": 0.0092, "segm_mAP_m": 0.5901, "segm_mAP_l": 0.8011, "segm_mAP_copypaste": "0.7271 0.8191 0.8164 0.0092 0.5901 0.8011"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6636, "bbox_mAP_50": 0.8268, "bbox_mAP_75": 0.8079, "bbox_mAP_s": 0.0275, "bbox_mAP_m": 0.5708, "bbox_mAP_l": 0.7247, "bbox_mAP_copypaste": "0.6636 0.8268 0.8079 0.0275 0.5708 0.7247", "segm_mAP": 0.7422, "segm_mAP_50": 0.8241, "segm_mAP_75": 0.8241, "segm_mAP_s": 0.0119, "segm_mAP_m": 0.5969, "segm_mAP_l": 0.8198, "segm_mAP_copypaste": "0.7422 0.8241 0.8241 0.0119 0.5969 0.8198"}
